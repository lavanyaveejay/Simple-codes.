#include<bits/stdc++.h>
using namespace std;

typedef string Elem;

class CNode
{
   private:
      Elem elem;
      CNode *next;
     
      friend class CircleList;
};

class CircleList
{
public:
    CircleList();
    ~CircleList();
    bool empty() const;
    const Elem &front() const;
    const Elem &back() const;
    void advance();
    void display();
    void add(const Elem& e);
    void remove();
   
    private:
        CNode *cursor;
};

CircleList::CircleList()
{
cursor=NULL;
}

CircleList::~CircleList()
{
  
}

void CircleList::advance()
{
   if(cursor==NULL)
   {
       cout<<"List is Empty!!!";
       return;
   }
   else
   {
   cursor=cursor->next;
   return;
}
}

bool CircleList::empty() const
{
   if(cursor==NULL)
   return true;
   else
   return false;
}

void CircleList::remove()
{
   if(cursor==NULL)
   {
   cout<<"List is Empty!!!";
   return;
   }
   else
   {
       CNode *next_of_cursor=cursor->next;
       cursor->next=next_of_cursor->next;
       delete next_of_cursor;
       return;
   }
}
void CircleList::add(const Elem &e)
{
   CNode *new_node=new CNode();
      new_node->elem=e;
      new_node->next=NULL;

if(cursor==NULL)
       {
cursor=new_node;
      new_node->next=cursor;
}
      
       else
       {
           CNode *temp=cursor;
          
           while(temp->next!=cursor)
           {
               temp=temp->next;
           }
          
           temp->next=new_node;
           new_node->next=cursor;
       }
      
       return;
}

const Elem& CircleList::front() const
{
   if(cursor==NULL)
   {
return cursor->elem;
}
   else
   {
       return cursor->elem;
   }
}

const Elem& CircleList::back() const
{
   if(cursor==NULL)
   {
return cursor->elem;
   }
   else
   {
       return cursor->next->elem;
   }
  
}

void CircleList::display()
{
   CNode *temp=cursor;
  
   cout<<"\n\nList of Songs : "<<endl<<endl;
  
   while(temp->next!=cursor)
   {
       cout<<temp->elem<<" ";
       temp=temp->next;
   }
  
   cout<<temp->elem<<" ";
   return;
}
int main()
{
   CircleList list;
  
   list.add("Song1");
   list.add("Song2");
  
   list.display();
  
   cout<<"\n\nCurrent Song : "<<list.front();
  
   cout<<"\n\nNext Song : "<<list.back();
  
   list.advance();
  
   cout<<"\n\nAfter Advancing ...";
  
   cout<<"\n\nCurrent Song : "<<list.front();
  
   cout<<"\n\nNext Song : "<<list.back();
  
  
   list.remove();
  
   cout<<"\n\nAfter removing the Current Song : ";
   cout<<"\n\nThe Playlist Contains : ";

   list.display();
  
   cout<<"\n\n";

}
